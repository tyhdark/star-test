{"name": "test_send_sequence", "status": "failed", "statusDetails": {"message": "AssertionError: assert 1999700 == ((5000000 - 3000000) - 100)\n +  where 3000000 = <bound method Compute.to_u of <class 'tools.compute.Compute'>>((1 + 2))\n +    where <bound method Compute.to_u of <class 'tools.compute.Compute'>> = Compute.to_u", "trace": "self = <checklist.test_send.TestSend object at 0x7fc8542b8340>, creat_two_nokyc = ('me1lt2ujtv38s07jgckkf6zhje79syad2mr5s24qz', 'me1jzj2ery9wuc2tkw4ztzxcdhdfrv9zurdwtk8jc', 5000000)\n\n    @pytest.mark.file_829_failed_2\n    def test_send_sequence(self, creat_two_nokyc):\n        \"\"\"\n        一个用户在一个块内向一个用户发起两笔不同的转账，指定sequence\n        \"\"\"\n        # 创建两个用户，\n        user_addr_a, user_addr_b, balances = creat_two_nokyc\n        # user_addr_a = \"me1yvrw8l724k4wdd50wzw6vyxnf0mx245kf8ruar\"\n        # user_addr_b = \"me10esf6004mf8tcv4hk8wuegtunwx3fcllgqdmfd\"\n        # 拿到这个用户的number和sequence\n        number = (HttpResponse.q.Account.aunt_account_addr(addr=user_addr_a))['account_number']\n        sequence = int((HttpResponse.q.Account.aunt_account_addr(addr=user_addr_a))['sequence'])\n        logger.info(f\"number={number},sequence={sequence},type={type(sequence)}\")\n        send_data_1 = dict(from_addr=user_addr_a,\n                           to_addr=user_addr_b, amount=1, fees=100, node=\"localhost:26657\",\n                           sequence=f\"-s={sequence} -a={number}  --offline\")\n        send_data_2 = dict(from_addr=user_addr_a,\n                           to_addr=user_addr_b, amount=2, fees=200, node=\"localhost:26657\",\n                           sequence=f\"-s={sequence + 1} -a={number}  --offline\")\n        self.test_bank.test_send(**send_data_1)\n        self.test_bank.test_send(**send_data_2)\n    \n        # partial_function1 = partial(self.test_bank.test_send, **send_data_1)\n        # partial_function2 = partial(self.test_bank.test_send, **send_data_2)\n        # with ThreadPoolExecutor(max_workers=2) as executor:\n        #     # 提交操作1和操作2到进程池中并发执行\n        #     future1 = executor.submit(partial_function1)\n        #     future2 = executor.submit(partial_function2)\n        #     #     # 等待操作1和操作2执行完成\n        #     future1.result()\n        #     future2.result()\n        # 查看余额有没有到账\n        user_a_balances = HttpResponse.get_balance_unit(user_addr=user_addr_a)\n        user_b_balances = HttpResponse.get_balance_unit(user_addr=user_addr_b)\n>       assert user_a_balances == balances - Compute.to_u(1 + 2) - 100\nE       AssertionError: assert 1999700 == ((5000000 - 3000000) - 100)\nE        +  where 3000000 = <bound method Compute.to_u of <class 'tools.compute.Compute'>>((1 + 2))\nE        +    where <bound method Compute.to_u of <class 'tools.compute.Compute'>> = Compute.to_u\n\nchecklist/test_send.py:169: AssertionError"}, "description": "\n        一个用户在一个块内向一个用户发起两笔不同的转账，指定sequence\n        ", "attachments": [{"name": "log", "source": "d8dec42e-8e3d-476b-aed9-54f44072138d-attachment.txt", "type": "text/plain"}], "start": 1693278648429, "stop": 1693278661172, "uuid": "9eafc104-52fc-4cbb-823b-ced7c0961ccc", "historyId": "437c9e7ff99db4c14587a72e831ca848", "testCaseId": "25039381babc5be7892e01e0d260f5c4", "fullName": "checklist.test_send.TestSend#test_send_sequence", "labels": [{"name": "tag", "value": "file_829_failed_2"}, {"name": "parentSuite", "value": "checklist"}, {"name": "suite", "value": "test_send"}, {"name": "subSuite", "value": "TestSend"}, {"name": "host", "value": "wang"}, {"name": "thread", "value": "110354-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "checklist.test_send"}]}