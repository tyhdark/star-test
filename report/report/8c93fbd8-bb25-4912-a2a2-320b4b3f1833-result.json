{"name": "test_send_sequence", "status": "broken", "statusDetails": {"message": "tenacity.RetryError: RetryError[<Future at 0x7f12cf5d3430 state=finished raised AssertionError>]", "trace": "self = <Retrying object at 0x7f12cf5560e0 (stop=<tenacity.stop.stop_after_attempt object at 0x7f12cf555b10>, wait=<tenacity.w...0x7f12d08104f0>, before=<function before_nothing at 0x7f12d0802170>, after=<function after_nothing at 0x7f12d0802440>)>, fn = <function HttpQuery.Tx.query_tx at 0x7f12cf558e50>\nargs = ('3940AB93A6368F764CEBF14605E2C8E01389FAC0DC35B9E1F46C4EC204EA2626',), kwargs = {}, retry_state = <RetryCallState 139718765268032: attempt #10; slept for 27.0; last result: failed (AssertionError )>, do = <tenacity.DoAttempt object at 0x7f12cf5d3520>\n\n    def __call__(\n        self,\n        fn: t.Callable[..., WrappedFnReturnT],\n        *args: t.Any,\n        **kwargs: t.Any,\n    ) -> WrappedFnReturnT:\n        self.begin()\n    \n        retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)\n        while True:\n            do = self.iter(retry_state=retry_state)\n            if isinstance(do, DoAttempt):\n                try:\n>                   result = fn(*args, **kwargs)\n\nvenv-start/lib/python3.10/site-packages/tenacity/__init__.py:382: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntx_hash = '3940AB93A6368F764CEBF14605E2C8E01389FAC0DC35B9E1F46C4EC204EA2626'\n\n    @staticmethod\n    @retry(stop=stop_after_attempt(10), wait=wait_fixed(3))\n    def query_tx(tx_hash):\n        url = HttpQuery.api_url + HttpQuery.query_tx_hash.format(hash=tx_hash)\n        logger.info(f\"{inspect.stack()[0][3]}: {url}\")\n        response = HttpQuery.client.get(url=url)\n        logger.debug(f\"response: {response}\")\n        logger.info(f\"response status_code: {response.status_code}\")\n>       assert response.status_code == 200\nE       AssertionError\n\nx/query.py:294: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <checklist.test_send.TestSend object at 0x7f12cd08e0e0>, creat_two_nokyc = ('me10qs9sgk99zg32ac44xkm6kk5pzwy6k64fsncph', 'me1werewdxchq8xpnd5zfrskl3uzzvc96ys5mf5ns', 5000000)\n\n    @pytest.mark.file_829_failed\n    def test_send_sequence(self, creat_two_nokyc):\n        \"\"\"\n        一个用户在一个块内向一个用户发起两笔不同的转账，指定sequence\n        \"\"\"\n        # 创建两个用户，\n        user_addr_a, user_addr_b, balances = creat_two_nokyc\n        # user_addr_a = \"me1yvrw8l724k4wdd50wzw6vyxnf0mx245kf8ruar\"\n        # user_addr_b = \"me10esf6004mf8tcv4hk8wuegtunwx3fcllgqdmfd\"\n        # 拿到这个用户的number和sequence\n        number = (HttpResponse.q.Account.aunt_account_addr(addr=user_addr_a))['account_number']\n        sequence = int((HttpResponse.q.Account.aunt_account_addr(addr=user_addr_a))['sequence'])\n        logger.info(f\"number={number},sequence={sequence},type={type(sequence)}\")\n        send_data_1 = dict(from_addr=user_addr_a,\n                           to_addr=user_addr_b, amount=1, fees=100, node=\"localhost:26657\",\n                           sequence=f\"-s={sequence} -a={number}  --offline\")\n        send_data_2 = dict(from_addr=user_addr_a,\n                           to_addr=user_addr_b, amount=2, fees=200, node=\"localhost:26657\",\n                           sequence=f\"-s={sequence + 1} -a={number}  --offline\")\n        partial_function1 = partial(self.test_bank.test_send, **send_data_1)\n        partial_function2 = partial(self.test_bank.test_send, **send_data_2)\n        with ThreadPoolExecutor(max_workers=2) as executor:\n            # 提交操作1和操作2到进程池中并发执行\n            future1 = executor.submit(partial_function1)\n            future2 = executor.submit(partial_function2)\n            #     # 等待操作1和操作2执行完成\n            future1.result()\n>           future2.result()\n\nchecklist/test_send.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/python3.10.12/lib/python3.10/concurrent/futures/_base.py:458: in result\n    return self.__get_result()\n/usr/local/python3.10.12/lib/python3.10/concurrent/futures/_base.py:403: in __get_result\n    raise self._exception\n/usr/local/python3.10.12/lib/python3.10/concurrent/futures/thread.py:58: in run\n    result = self.fn(*self.args, **self.kwargs)\ncases/unitcases.py:30: in test_send\n    resp = self.hq.tx.query_tx(tx_info['txhash'])\nvenv-start/lib/python3.10/site-packages/tenacity/__init__.py:289: in wrapped_f\n    return self(f, *args, **kw)\nvenv-start/lib/python3.10/site-packages/tenacity/__init__.py:379: in __call__\n    do = self.iter(retry_state=retry_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Retrying object at 0x7f12cf5560e0 (stop=<tenacity.stop.stop_after_attempt object at 0x7f12cf555b10>, wait=<tenacity.w...0x7f12d08104f0>, before=<function before_nothing at 0x7f12d0802170>, after=<function after_nothing at 0x7f12d0802440>)>\nretry_state = <RetryCallState 139718765268032: attempt #10; slept for 27.0; last result: failed (AssertionError )>\n\n    def iter(self, retry_state: \"RetryCallState\") -> t.Union[DoAttempt, DoSleep, t.Any]:  # noqa\n        fut = retry_state.outcome\n        if fut is None:\n            if self.before is not None:\n                self.before(retry_state)\n            return DoAttempt()\n    \n        is_explicit_retry = fut.failed and isinstance(fut.exception(), TryAgain)\n        if not (is_explicit_retry or self.retry(retry_state)):\n            return fut.result()\n    \n        if self.after is not None:\n            self.after(retry_state)\n    \n        self.statistics[\"delay_since_first_attempt\"] = retry_state.seconds_since_start\n        if self.stop(retry_state):\n            if self.retry_error_callback:\n                return self.retry_error_callback(retry_state)\n            retry_exc = self.retry_error_cls(fut)\n            if self.reraise:\n                raise retry_exc.reraise()\n>           raise retry_exc from fut.exception()\nE           tenacity.RetryError: RetryError[<Future at 0x7f12cf5d3430 state=finished raised AssertionError>]\n\nvenv-start/lib/python3.10/site-packages/tenacity/__init__.py:326: RetryError"}, "description": "\n        一个用户在一个块内向一个用户发起两笔不同的转账，指定sequence\n        ", "attachments": [{"name": "log", "source": "13902d5d-8691-4a0f-868e-e12b1b761cc9-attachment.txt", "type": "text/plain"}], "start": 1693277459470, "stop": 1693277493086, "uuid": "7c9a6933-aa47-4840-ab93-d87bd1c672e8", "historyId": "437c9e7ff99db4c14587a72e831ca848", "testCaseId": "25039381babc5be7892e01e0d260f5c4", "fullName": "checklist.test_send.TestSend#test_send_sequence", "labels": [{"name": "tag", "value": "file_829_failed"}, {"name": "parentSuite", "value": "checklist"}, {"name": "suite", "value": "test_send"}, {"name": "subSuite", "value": "TestSend"}, {"name": "host", "value": "wang"}, {"name": "thread", "value": "106913-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "checklist.test_send"}]}